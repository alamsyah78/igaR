condition_terms <- c("jika", "apabila", "sebelum", "setelah", "ketika", "selama")
direct_object_terms <- c("dokumen", "laporan", "data", "surat")
indirect_object_terms <- c("masyarakat", "pihak ketiga", "lembaga")
execution_constraint_terms <- c("tidak lebih dari", "hanya jika", "tidak boleh melanggar")
temporal_constraint_terms <- c("dalam waktu \\d+ hari", "setiap bulan", "paling lambat \\d+ bulan")
spatial_constraint_terms <- c("di kawasan", "di lokasi", "di seluruh wilayah")
normative_constraint_terms <- c("berdasarkan Undang-Undang", "mengacu pada peraturan", "sesuai dengan hukum")
sanctions_terms <- c("denda maksimal", "hukuman pidana", "sanksi administratif")
authority_terms <- c("Menteri", "Pemerintah Daerah", "Lembaga Penegak Hukum")
monitoring_mechanism_terms <- c("audit tahunan", "laporan bulanan", "pemantauan lapangan")
evaluation_mechanism_terms <- c("evaluasi triwulanan", "penilaian dampak", "review berkala")
information_terms <- c("data lingkungan", "laporan publik", "informasi teknis")
# Definisikan pola regex untuk Aim
aim_pattern <- paste0(
"\\b(",
"men[aiueo][a-z]+",      # Kata kerja diawali 'men'
"|meng[aiueo][a-z]+",    # Kata kerja diawali 'meng'
"|mem[aiueo][a-z]+",     # Kata kerja diawali 'mem'
"|mel[aiueo][a-z]+",     # Kata kerja diawali 'mel'
")\\b"
)
# Pola Regex untuk masing-masing komponen IG
patterns <- list(
Attribute = paste0("\\b(", paste(attribute_terms, collapse = "|"), ")\\b"),
Deontic = paste0("\\b(", paste(deontic_terms, collapse = "|"), ")\\b"),
Aim = aim_pattern,  # Gunakan regex untuk Aim
Object = paste0("\\b(", paste(object_terms, collapse = "|"), ")\\b"),
ActivationCondition = paste0("\\b(", paste(activation_condition_terms, collapse = "|"), ")\\b"),
Condition = paste0("\\b(", paste(condition_terms, collapse = "|"), ")\\b"),
DirectObject = paste0("\\b(", paste(direct_object_terms, collapse = "|"), ")\\b"),
IndirectObject = paste0("\\b(", paste(indirect_object_terms, collapse = "|"), ")\\b"),
ExecutionConstraint = paste0("\\b(", paste(execution_constraint_terms, collapse = "|"), ")\\b"),
TemporalConstraint = paste0("\\b(", paste(temporal_constraint_terms, collapse = "|"), ")\\b"),
SpatialConstraint = paste0("\\b(", paste(spatial_constraint_terms, collapse = "|"), ")\\b"),
NormativeConstraint = paste0("\\b(", paste(normative_constraint_terms, collapse = "|"), ")\\b"),
Sanctions = paste0("\\b(", paste(sanctions_terms, collapse = "|"), ")\\b"),
Authority = paste0("\\b(", paste(authority_terms, collapse = "|"), ")\\b"),
MonitoringMechanism = paste0("\\b(", paste(monitoring_mechanism_terms, collapse = "|"), ")\\b"),
EvaluationMechanism = paste0("\\b(", paste(evaluation_mechanism_terms, collapse = "|"), ")\\b"),
Information = paste0("\\b(", paste(information_terms, collapse = "|"), ")\\b")
)
# Inisialisasi hasil
ig_components <- lapply(patterns, function(pattern) tokens[grepl(pattern, tokens)])
# Menetapkan nama untuk elemen dalam list hasil
names(ig_components) <- names(patterns)
return(ig_components)
}
#' Extract Institutional Grammar Components
#'
#' Fungsi ini digunakan untuk mengekstrak komponen **Institutional Grammar (IG)** dari token teks
#' berdasarkan pola regex yang telah didefinisikan.
#'
#' @param tokens Vektor karakter yang berisi token teks yang akan dianalisis.
#'
#' @return Sebuah list dengan 17 elemen, masing-masing mewakili kategori IG 2.0.
#'
#' @examples
#' tokens <- c("Gubernur", "harus", "menetapkan", "Rencana", "dalam waktu 6 bulan", "berdasarkan Undang-Undang")
#' result <- extract_ig_components(tokens)
#' print(result)
#'
#' @export
extract_ig_components <- function(tokens) {
# Daftar istilah untuk setiap kategori IG
attribute_terms <- c("Gubernur", "Bupati/Walikota", "Menteri", "Presiden", "Pemerintah Daerah", "Direktur", "Kepala Desa")
deontic_terms <- c("harus", "dapat", "tidak boleh", "wajib")
object_terms <- c("Rencana Perlindungan dan Pengelolaan Ekosistem Gambut", "Peta Ekosistem", "Program Nasional", "Kebijakan Lingkungan")
activation_condition_terms <- c("terlebih dahulu harus mendapat", "paling lambat \\d+ bulan sejak", "sesuai dengan", "berdasarkan")
condition_terms <- c("jika", "apabila", "sebelum", "setelah", "ketika", "selama")
direct_object_terms <- c("dokumen", "laporan", "data", "surat")
indirect_object_terms <- c("masyarakat", "pihak ketiga", "lembaga")
execution_constraint_terms <- c("tidak lebih dari", "hanya jika", "tidak boleh melanggar")
temporal_constraint_terms <- c("dalam waktu \\d+ hari", "setiap bulan", "paling lambat \\d+ bulan")
spatial_constraint_terms <- c("di kawasan", "di lokasi", "di seluruh wilayah")
normative_constraint_terms <- c("berdasarkan Undang-Undang", "mengacu pada peraturan", "sesuai dengan hukum")
sanctions_terms <- c("denda maksimal", "hukuman pidana", "sanksi administratif")
authority_terms <- c("Menteri", "Pemerintah Daerah", "Lembaga Penegak Hukum")
monitoring_mechanism_terms <- c("audit tahunan", "laporan bulanan", "pemantauan lapangan")
evaluation_mechanism_terms <- c("evaluasi triwulanan", "penilaian dampak", "review berkala")
information_terms <- c("data lingkungan", "laporan publik", "informasi teknis")
# Definisikan pola regex untuk Aim
aim_pattern <- paste0(
"\\b(",
"men[aiueo][a-z]+",      # Kata kerja diawali 'men'
"|meng[aiueo][a-z]+",    # Kata kerja diawali 'meng'
"|mem[aiueo][a-z]+",     # Kata kerja diawali 'mem'
"|mel[aiueo][a-z]+",     # Kata kerja diawali 'mel'
")\\b"
)
# Pola Regex untuk masing-masing komponen IG
patterns <- list(
Attribute = paste0("\\b(", paste(attribute_terms, collapse = "|"), ")\\b"),
Deontic = paste0("\\b(", paste(deontic_terms, collapse = "|"), ")\\b"),
Aim = aim_pattern,  # Gunakan regex untuk Aim
Object = paste0("\\b(", paste(object_terms, collapse = "|"), ")\\b"),
ActivationCondition = paste0("\\b(", paste(activation_condition_terms, collapse = "|"), ")\\b"),
Condition = paste0("\\b(", paste(condition_terms, collapse = "|"), ")\\b"),
DirectObject = paste0("\\b(", paste(direct_object_terms, collapse = "|"), ")\\b"),
IndirectObject = paste0("\\b(", paste(indirect_object_terms, collapse = "|"), ")\\b"),
ExecutionConstraint = paste0("\\b(", paste(execution_constraint_terms, collapse = "|"), ")\\b"),
TemporalConstraint = paste0("\\b(", paste(temporal_constraint_terms, collapse = "|"), ")\\b"),
SpatialConstraint = paste0("\\b(", paste(spatial_constraint_terms, collapse = "|"), ")\\b"),
NormativeConstraint = paste0("\\b(", paste(normative_constraint_terms, collapse = "|"), ")\\b"),
Sanctions = paste0("\\b(", paste(sanctions_terms, collapse = "|"), ")\\b"),
Authority = paste0("\\b(", paste(authority_terms, collapse = "|"), ")\\b"),
MonitoringMechanism = paste0("\\b(", paste(monitoring_mechanism_terms, collapse = "|"), ")\\b"),
EvaluationMechanism = paste0("\\b(", paste(evaluation_mechanism_terms, collapse = "|"), ")\\b"),
Information = paste0("\\b(", paste(information_terms, collapse = "|"), ")\\b")
)
# Inisialisasi hasil
ig_components <- lapply(patterns, function(pattern) tokens[grepl(pattern, tokens)])
# Menetapkan nama untuk elemen dalam list hasil
names(ig_components) <- names(patterns)
return(ig_components)
}
yanlik <- read_regulation("C:/Users/ThinkPad P52s/Documents/igaR/example.txt")
yanlik_token <- tokenize_text(yanlik) #tokenisasi
yanlik_ig <- extract_ig_components(yanlik_token) #ekstrak komponen IG
visualize_ig(yanlik_ig) #visualisasi
visualize_aim(yanlik_ig) #visualisasi hanya komponen `Aim`
#' Visualisasi Komponen Attribute
#'
#' Fungsi ini digunakan untuk memvisualisasikan token dalam komponen `Attribute` menggunakan pustaka `igraph`.
#'
#' @param ig_data List hasil dari fungsi `extract_ig_components`.
#' @return Plot jaringan `Attribute`.
#'
#' @examples
#' tokens <- c("Gubernur", "harus", "menetapkan", "Rencana", "Menteri", "Presiden")
#' ig_data <- extract_ig_components(tokens)
#' visualize_attribute(ig_data)
#'
#' @export
visualize_attribute <- function(ig_data) {
# Periksa apakah igraph sudah terinstal
if (!requireNamespace("igraph", quietly = TRUE)) {
stop("Paket 'igraph' belum terinstal. Instal dengan `install.packages('igraph')`.")
}
# Ambil komponen Attribute
attribute_tokens <- ig_data$Attribute
# Periksa jika tidak ada token Attribute
if (length(attribute_tokens) == 0) {
stop("Tidak ada token `Attribute` untuk divisualisasikan.")
}
# Buat daftar edge dari Attribute (hubungkan kategori Attribute ke token)
edges <- cbind(rep("Attribute", length(attribute_tokens)), attribute_tokens)
# Buat graph
graph <- igraph::graph_from_edgelist(edges, directed = FALSE)
# Visualisasi graph
plot(
graph,
vertex.size = 15,
vertex.color = "lightblue",
vertex.label.color = "black",
vertex.label.cex = 0.8,
edge.width = 1,
main = "Visualisasi Komponen Attribute"
)
}
visualize_attribute(yanlik_ig) #visualisasi hanya `Attribute`.
#' Visualisasi Komponen Attribute
#'
#' Fungsi ini digunakan untuk memvisualisasikan token dalam komponen `Attribute` menggunakan pustaka `igraph`.
#'
#' @param ig_data List hasil dari fungsi `extract_ig_components`.
#' @return Plot jaringan `Attribute`.
#'
#' @examples
#' tokens <- c("Gubernur", "harus", "menetapkan", "Rencana", "Menteri", "Presiden")
#' ig_data <- extract_ig_components(tokens)
#' visualize_attribute(ig_data)
#'
#' @export
visualize_attribute <- function(ig_data) {
# Periksa apakah igraph sudah terinstal
if (!requireNamespace("igraph", quietly = TRUE)) {
stop("Paket 'igraph' belum terinstal. Instal dengan `install.packages('igraph')`.")
}
# Ambil komponen Attribute
attribute_tokens <- ig_data$Attribute
# Periksa jika tidak ada token Attribute
if (length(attribute_tokens) == 0) {
stop("Tidak ada token `Attribute` untuk divisualisasikan.")
}
# Buat daftar edge dari Attribute (hubungkan kategori Attribute ke token)
edges <- cbind(rep("Attribute", length(attribute_tokens)), attribute_tokens)
# Buat graph
graph <- igraph::graph_from_edgelist(edges, directed = FALSE)
# Visualisasi graph
plot(
graph,
vertex.size = 15,
vertex.color = "lightblue",
vertex.label.color = "black",
vertex.label.cex = 0.8,
edge.width = 1,
main = "Visualisasi Komponen Attribute"
)
}
visualize_attribute(yanlik_ig) #visualisasi hanya `Attribute`.
yanlik <- read_regulation("C:/Users/ThinkPad P52s/Documents/igaR/example.txt")
yanlik_token <- tokenize_text(yanlik) #tokenisasi
yanlik_ig <- extract_ig_components(yanlik_token) #ekstrak komponen IG
visualize_attribute(yanlik_ig) #visualisasi hanya `Attribute`.
yanlik_token <- tokenize_text(yanlik) #tokenisasi
yanlik_ig <- extract_ig_components(yanlik_token) #ekstrak komponen IG
visualize_ig(yanlik_ig) #visualisasi
visualize_aim(yanlik_ig) #visualisasi hanya komponen `Aim`
visualize_attribute(yanlik_ig) #visualisasi hanya `Attribute`.
View(yanlik_ig)
#' Extract Institutional Grammar Components
#'
#' Fungsi ini digunakan untuk mengekstrak komponen **Institutional Grammar (IG)** dari token teks
#' berdasarkan pola regex yang telah didefinisikan.
#'
#' @param tokens Vektor karakter yang berisi token teks yang akan dianalisis.
#'
#' @return Sebuah list dengan 17 elemen, masing-masing mewakili kategori IG 2.0.
#'
#' @examples
#' tokens <- c("Gubernur", "harus", "menetapkan", "Rencana", "dalam waktu 6 bulan", "berdasarkan Undang-Undang")
#' result <- extract_ig_components(tokens)
#' print(result)
#'
#' @export
extract_ig_components <- function(tokens) {
# Daftar istilah untuk setiap kategori IG
attribute_terms <- c("gubernur", "bupati/walikota", "menteri", "presiden",
"pemerintah daerah", "direktur", "kepala desa",
"warga negara", "penduduk", "penyelenggara pelayanan publik",
"institusi penyelenggara negara", "korporasi",
"lembaga independen", "badan hukum lain",
"atasan satuan kerja penyelenggara",
"pimpinan satuan kerja",
"organisasi penyelenggara pelayanan publik",
"pelaksana pelayanan publik",
"pejabat", "pegawai", "petugas", "setiap orang",
"masyarakat", "kelompok", "badan usaha")
deontic_terms <- c("harus", "dapat", "tidak boleh", "wajib")
object_terms <- c("Rencana Perlindungan dan Pengelolaan Ekosistem Gambut", "Peta Ekosistem", "Program Nasional", "Kebijakan Lingkungan")
activation_condition_terms <- c("terlebih dahulu harus mendapat", "paling lambat \\d+ bulan sejak", "sesuai dengan", "berdasarkan")
condition_terms <- c("jika", "apabila", "sebelum", "setelah", "ketika", "selama")
direct_object_terms <- c("dokumen", "laporan", "data", "surat")
indirect_object_terms <- c("masyarakat", "pihak ketiga", "lembaga")
execution_constraint_terms <- c("tidak lebih dari", "hanya jika", "tidak boleh melanggar")
temporal_constraint_terms <- c("dalam waktu \\d+ hari", "setiap bulan", "paling lambat \\d+ bulan")
spatial_constraint_terms <- c("di kawasan", "di lokasi", "di seluruh wilayah")
normative_constraint_terms <- c("berdasarkan Undang-Undang", "mengacu pada peraturan", "sesuai dengan hukum")
sanctions_terms <- c("denda maksimal", "hukuman pidana", "sanksi administratif")
authority_terms <- c("Menteri", "Pemerintah Daerah", "Lembaga Penegak Hukum")
monitoring_mechanism_terms <- c("audit tahunan", "laporan bulanan", "pemantauan lapangan")
evaluation_mechanism_terms <- c("evaluasi triwulanan", "penilaian dampak", "review berkala")
information_terms <- c("data lingkungan", "laporan publik", "informasi teknis")
# Definisikan pola regex untuk Aim
aim_pattern <- paste0(
"\\b(",
"men[aiueo][a-z]+",      # Kata kerja diawali 'men'
"|meng[aiueo][a-z]+",    # Kata kerja diawali 'meng'
"|mem[aiueo][a-z]+",     # Kata kerja diawali 'mem'
"|mel[aiueo][a-z]+",     # Kata kerja diawali 'mel'
")\\b"
)
# Pola Regex untuk masing-masing komponen IG
patterns <- list(
Attribute = paste0("\\b(", paste(attribute_terms, collapse = "|"), ")\\b"),
Deontic = paste0("\\b(", paste(deontic_terms, collapse = "|"), ")\\b"),
Aim = aim_pattern,  # Gunakan regex untuk Aim
Object = paste0("\\b(", paste(object_terms, collapse = "|"), ")\\b"),
ActivationCondition = paste0("\\b(", paste(activation_condition_terms, collapse = "|"), ")\\b"),
Condition = paste0("\\b(", paste(condition_terms, collapse = "|"), ")\\b"),
DirectObject = paste0("\\b(", paste(direct_object_terms, collapse = "|"), ")\\b"),
IndirectObject = paste0("\\b(", paste(indirect_object_terms, collapse = "|"), ")\\b"),
ExecutionConstraint = paste0("\\b(", paste(execution_constraint_terms, collapse = "|"), ")\\b"),
TemporalConstraint = paste0("\\b(", paste(temporal_constraint_terms, collapse = "|"), ")\\b"),
SpatialConstraint = paste0("\\b(", paste(spatial_constraint_terms, collapse = "|"), ")\\b"),
NormativeConstraint = paste0("\\b(", paste(normative_constraint_terms, collapse = "|"), ")\\b"),
Sanctions = paste0("\\b(", paste(sanctions_terms, collapse = "|"), ")\\b"),
Authority = paste0("\\b(", paste(authority_terms, collapse = "|"), ")\\b"),
MonitoringMechanism = paste0("\\b(", paste(monitoring_mechanism_terms, collapse = "|"), ")\\b"),
EvaluationMechanism = paste0("\\b(", paste(evaluation_mechanism_terms, collapse = "|"), ")\\b"),
Information = paste0("\\b(", paste(information_terms, collapse = "|"), ")\\b")
)
# Inisialisasi hasil
ig_components <- lapply(patterns, function(pattern) tokens[grepl(pattern, tokens)])
# Menetapkan nama untuk elemen dalam list hasil
names(ig_components) <- names(patterns)
return(ig_components)
}
yanlik <- read_regulation("C:/Users/ThinkPad P52s/Documents/igaR/example.txt")
yanlik_token <- tokenize_text(yanlik) #tokenisasi
yanlik_ig <- extract_ig_components(yanlik_token) #ekstrak komponen IG
visualize_ig(yanlik_ig) #visualisasi
visualize_aim(yanlik_ig) #visualisasi hanya komponen `Aim`
visualize_attribute(yanlik_ig) #visualisasi hanya `Attribute`.
#' Statistik Jejaring untuk Komponen IG
#'
#' Fungsi ini menghitung statistik jejaring untuk kategori IG yang dipilih (misalnya, `Attribute`, `Deontic`, dll.).
#'
#' @param ig_data List hasil dari fungsi `extract_ig_components`.
#' @param component Nama kategori IG yang ingin dihitung statistik jejaringnya.
#' @return Statistik jejaring dalam bentuk list.
#'
#' @examples
#' tokens <- c("Gubernur", "Menteri", "Presiden", "Bupati", "Direktur", "harus", "menetapkan")
#' ig_data <- extract_ig_components(tokens)
#' stats <- net_stats(ig_data, component = "Attribute")
#' print(stats)
#'
#' @export
net_stats <- function(ig_data, component) {
# Periksa apakah igraph sudah terinstal
if (!requireNamespace("igraph", quietly = TRUE)) {
stop("Paket 'igraph' belum terinstal. Instal dengan `install.packages('igraph')`.")
}
# Validasi komponen
if (!component %in% names(ig_data)) {
stop(paste("Komponen", component, "tidak ditemukan dalam ig_data."))
}
# Ambil token berdasarkan komponen yang dipilih
tokens <- ig_data[[component]]
# Periksa jika tidak ada token
if (length(tokens) == 0) {
stop(paste("Tidak ada token untuk komponen", component, "yang dapat dihitung statistiknya."))
}
# Buat daftar edge
edges <- cbind(rep(component, length(tokens)), tokens)
# Buat graph
graph <- igraph::graph_from_edgelist(edges, directed = FALSE)
# Hitung statistik jejaring
stats <- list(
component = component,                                           # Nama komponen
num_nodes = igraph::vcount(graph),                              # Jumlah simpul
num_edges = igraph::ecount(graph),                              # Jumlah tepi
density = igraph::edge_density(graph),                          # Kepadatan jejaring
degree = igraph::degree(graph),                                 # Derajat simpul
diameter = igraph::diameter(graph, directed = FALSE),           # Diameter jejaring
closeness = igraph::closeness(graph, normalized = TRUE),        # Closeness centrality
betweenness = igraph::betweenness(graph, normalized = TRUE),    # Betweenness centrality
connected_components = igraph::components(graph)$csize          # Ukuran komponen terhubung
)
return(stats)
}
stats_attribute <- net_stats(ig_data, component = "Attribute")
stats_attribute <- net_stats(yanlik_ig, component = "Attribute")
print(stats_attribute)
cat(stats_attribute)
print(stats_attribute)
stats_aim <- net_stats(yanlik_ig, component = "Aim")
print(stats_aim)
View(stats_aim)
devtools::build_vignettes() #membuat file PDF permanen
devtools::document()
#' Extract Institutional Grammar Components
#'
#' Fungsi ini digunakan untuk mengekstrak komponen **Institutional Grammar (IG)** dari token teks
#' berdasarkan pola regex yang telah didefinisikan.
#'
#' @param tokens Vektor karakter yang berisi token teks yang akan dianalisis.
#'
#' @return Sebuah list dengan 17 elemen, masing-masing mewakili kategori IG 2.0.
#'
#' @examples
#' tokens <- c("Gubernur", "harus", "menetapkan", "Rencana", "dalam waktu 6 bulan", "berdasarkan Undang-Undang")
#' result <- extract_ig_components(tokens)
#' print(result)
#'
#' @export
extract_ig_components <- function(tokens) {
# Daftar istilah untuk setiap kategori IG
attribute_terms <- c("gubernur", "bupati/walikota", "menteri", "presiden",
"pemerintah daerah", "direktur", "kepala desa",
"warga negara", "penduduk", "penyelenggara pelayanan publik",
"institusi penyelenggara negara", "korporasi",
"lembaga independen", "badan hukum lain",
"atasan satuan kerja penyelenggara",
"pimpinan satuan kerja",
"organisasi penyelenggara pelayanan publik",
"pelaksana pelayanan publik",
"pejabat", "pegawai", "petugas", "setiap orang",
"masyarakat", "kelompok", "badan usaha")
deontic_terms <- c("harus", "dapat", "tidak boleh", "wajib")
object_terms <- c("Rencana Perlindungan dan Pengelolaan Ekosistem Gambut", "Peta Ekosistem", "Program Nasional", "Kebijakan Lingkungan")
activation_condition_terms <- c("terlebih dahulu harus mendapat", "paling lambat \\d+ bulan sejak", "sesuai dengan", "berdasarkan")
condition_terms <- c("jika", "apabila", "sebelum", "setelah", "ketika", "selama")
direct_object_terms <- c("dokumen", "laporan", "data", "surat")
indirect_object_terms <- c("masyarakat", "pihak ketiga", "lembaga")
execution_constraint_terms <- c("tidak lebih dari", "hanya jika", "tidak boleh melanggar")
temporal_constraint_terms <- c("dalam waktu \\d+ hari", "setiap bulan", "paling lambat \\d+ bulan")
spatial_constraint_terms <- c("di kawasan", "di lokasi", "di seluruh wilayah")
normative_constraint_terms <- c("berdasarkan Undang-Undang", "mengacu pada peraturan", "sesuai dengan hukum")
sanctions_terms <- c("denda maksimal", "hukuman pidana", "sanksi administratif")
authority_terms <- c("Menteri", "Pemerintah Daerah", "Lembaga Penegak Hukum")
monitoring_mechanism_terms <- c("audit tahunan", "laporan bulanan", "pemantauan lapangan")
evaluation_mechanism_terms <- c("evaluasi triwulanan", "penilaian dampak", "review berkala")
information_terms <- c("data lingkungan", "laporan publik", "informasi teknis")
# Definisikan pola regex untuk Aim
aim_pattern <- paste0(
"\\b(",
"men[aiueo][a-z]+",      # Kata kerja diawali 'men'
"|meng[aiueo][a-z]+",    # Kata kerja diawali 'meng'
"|mem[aiueo][a-z]+",     # Kata kerja diawali 'mem'
"|mel[aiueo][a-z]+",     # Kata kerja diawali 'mel'
")\\b"
)
# Pola Regex untuk masing-masing komponen IG
patterns <- list(
Attribute = paste0("\\b(", paste(attribute_terms, collapse = "|"), ")\\b"),
Deontic = paste0("\\b(", paste(deontic_terms, collapse = "|"), ")\\b"),
Aim = aim_pattern,  # Gunakan regex untuk Aim
Object = paste0("\\b(", paste(object_terms, collapse = "|"), ")\\b"),
ActivationCondition = paste0("\\b(", paste(activation_condition_terms, collapse = "|"), ")\\b"),
Condition = paste0("\\b(", paste(condition_terms, collapse = "|"), ")\\b"),
DirectObject = paste0("\\b(", paste(direct_object_terms, collapse = "|"), ")\\b"),
IndirectObject = paste0("\\b(", paste(indirect_object_terms, collapse = "|"), ")\\b"),
ExecutionConstraint = paste0("\\b(", paste(execution_constraint_terms, collapse = "|"), ")\\b"),
TemporalConstraint = paste0("\\b(", paste(temporal_constraint_terms, collapse = "|"), ")\\b"),
SpatialConstraint = paste0("\\b(", paste(spatial_constraint_terms, collapse = "|"), ")\\b"),
NormativeConstraint = paste0("\\b(", paste(normative_constraint_terms, collapse = "|"), ")\\b"),
Sanctions = paste0("\\b(", paste(sanctions_terms, collapse = "|"), ")\\b"),
Authority = paste0("\\b(", paste(authority_terms, collapse = "|"), ")\\b"),
MonitoringMechanism = paste0("\\b(", paste(monitoring_mechanism_terms, collapse = "|"), ")\\b"),
EvaluationMechanism = paste0("\\b(", paste(evaluation_mechanism_terms, collapse = "|"), ")\\b"),
Information = paste0("\\b(", paste(information_terms, collapse = "|"), ")\\b")
)
# Inisialisasi hasil
ig_components <- lapply(patterns, function(pattern) tokens[grepl(pattern, tokens)])
# Menetapkan nama untuk elemen dalam list hasil
names(ig_components) <- names(patterns)
return(ig_components)
}
#' Membaca File Teks Peraturan
#'
#' Fungsi ini digunakan untuk membaca file teks (.txt) yang berisi peraturan, membersihkannya dari baris kosong,
#' spasi berlebih, serta karakter khusus, dan mengubah teks menjadi huruf kecil.
#'
#' @param file_path String yang menunjukkan lokasi file teks (.txt) yang akan dibaca.
#'
#' @return Vektor karakter dari teks yang telah dibersihkan, di mana setiap elemen merepresentasikan satu baris.
#'
#' @details
#' Fungsi ini memastikan bahwa file yang diberikan:
#' - Berada pada lokasi yang benar.
#' - Memiliki ekstensi `.txt`.
#'
#' Proses pembersihan mencakup:
#' - Menghapus baris kosong.
#' - Menghilangkan spasi berlebih di awal dan akhir baris.
#' - Mengubah semua teks menjadi huruf kecil.
#' - Menghapus karakter khusus, tetapi tetap mempertahankan huruf, angka, spasi, dan tanda baca.
#'
#' @examples
#' # Contoh penggunaan:
#' # Misalkan file "regulation.txt" berada di direktori kerja
#' file_path <- "regulation.txt"
#' text <- read_regulation(file_path)
#' print(text)
#'
#' @export
read_regulation <- function(file_path) {
# Memastikan file ada di lokasi yang ditentukan
if (!file.exists(file_path)) {
stop("File tidak ditemukan: ", file_path)
}
# Memastikan file memiliki ekstensi .txt
if (!grepl("\\.txt$", file_path, ignore.case = TRUE)) {
stop("Hanya file .txt yang didukung oleh fungsi ini.")
}
# Membaca isi file teks
text <- readLines(file_path, warn = FALSE)
# Pembersihan data
# 1. Menghapus baris kosong
text <- text[text != ""]
# 2. Menghapus spasi berlebih di awal dan akhir baris
text <- trimws(text)
# 3. Mengubah semua teks menjadi huruf kecil
text <- tolower(text)
# 4. Menghapus karakter khusus atau simbol
# Hanya huruf, angka, spasi, dan tanda baca yang dipertahankan
text <- gsub("[^a-z0-9[:space:][:punct:]]", "", text)
return(text)
}
#' Tokenisasi Teks
#'
#' Fungsi ini digunakan untuk melakukan tokenisasi teks berbahasa Indonesia. Proses tokenisasi mencakup
#' normalisasi huruf kecil, penghapusan karakter tidak relevan, dan pemisahan teks menjadi token berdasarkan spasi.
#'
#' @param text String yang berisi teks yang akan ditokenisasi.
#' @return Vektor karakter yang berisi token yang dihasilkan dari teks input.
#'
#' @examples
#' text <- "Gubernur menetapkan kebijakan sesuai dengan aturan."
#' tokens <- tokenize_text(text)
#' print(tokens)
#'
#' @export
tokenize_text <- function(text) {
# Ubah semua teks menjadi huruf kecil
text <- tolower(text)
# Hapus karakter yang tidak relevan seperti angka dan simbol khusus
text <- gsub("[^a-z\\ ]", "", text)
# Pecah teks menjadi token berdasarkan spasi
tokens <- unlist(strsplit(text, "\\s+"))
# Hapus token kosong (jika ada)
tokens <- tokens[tokens != ""]
return(tokens)
}
devtools::document()
rm(list = c("extract_ig_components", "net_stats", "read_regulation",
"tokenize_text", "visualize_aim", "visualize_attribute", "visualize_ig"))
devtools::document()
devtools::build_vignettes() #membuat file PDF permanen
devtools::build_vignettes() #membuat file PDF permanen
